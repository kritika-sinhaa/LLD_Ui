{"ast":null,"code":"// import React, { useState } from 'react';\n// import { useNavigate } from 'react-router-dom';\n// import { toast, ToastContainer } from 'react-toastify';\n// import { authService } from '../../services/authService';\n// import '../styles/Register.css';\n// import 'react-toastify/dist/ReactToastify.css';\n\n// const Register = () => {\n//   const navigate = useNavigate();\n//   const [formData, setFormData] = useState({\n//     username: '',\n//     email: '',\n//     password: '',\n//     confirmPassword: '',\n//   });\n//   const [errors, setErrors] = useState({});\n//   const [isLoading, setIsLoading] = useState(false);\n\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData(prevState => ({\n//       ...prevState,\n//       [name]: value\n//     }));\n//   };\n//   const validateForm = () => {\n//     const newErrors = {};\n\n//     if (!formData.username.trim()) {\n//       newErrors.username = 'Username is required';\n//     }\n\n//     if (!formData.email) {\n//       newErrors.email = 'Email is required';\n//     } else if (!/\\S+@\\S+\\.\\S+/.test(formData.email)) {\n//       newErrors.email = 'Email is invalid';\n//     }\n\n//     if (!formData.password) {\n//       newErrors.password = 'Password is required';\n//     } else if (formData.password.length < 6) {\n//       newErrors.password = 'Password must be at least 6 characters';\n//     }\n\n//     if (formData.password !== formData.confirmPassword) {\n//       newErrors.confirmPassword = 'Passwords do not match';\n//     }\n\n//     setErrors(newErrors);\n//     return Object.keys(newErrors).length === 0;\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     if (validateForm()) {\n//       setIsLoading(true);\n//       try {\n//         console.log('Submitting registration form with data:', {\n//           ...formData,\n//           password: '[REDACTED]'\n//         });\n\n//         const response = await authService.register({\n//           username: formData.username,\n//           email: formData.email,\n//           password: formData.password\n//         });\n\n//         console.log('Registration successful:', response);\n\n//         setFormData({\n//           username: '',\n//           email: '',\n//           password: '',\n//           confirmPassword: ''\n//         });\n\n//         toast.success('Registration successful! You can now login with your credentials.', {\n//           position: \"top-center\",\n//           autoClose: 5000,\n//           hideProgressBar: false,\n//           closeOnClick: false,\n//           pauseOnHover: true,\n//           draggable: true,\n//           progress: undefined,\n//         });\n//         setIsLoading(false);\n\n//       } catch (error) {\n//         console.error('Registration error:', {\n//           message: error.message,\n//           status: error.response?.status,\n//           statusText: error.response?.statusText,\n//           data: error.response?.data\n//         });\n\n//         // Network or connection error\n//         if (!error.response) {\n//           toast.error('Unable to connect to the server. Please check your internet connection.');\n//           setErrors({\n//             submit: 'Connection error. Please try again.'\n//           });\n//           return;\n//         }\n\n//         // Server returned an error response\n//         if (error.response?.status === 409) {\n//           toast.error('Username or email already exists');\n//           setErrors({\n//             submit: 'Username or email already exists'\n//           });\n//         } else if (error.response?.status === 400) {\n//           toast.error('Please check your input and try again');\n//           const validationErrors = {};\n//           if (error.response?.data?.errors) {\n//             Object.entries(error.response.data.errors).forEach(([field, message]) => {\n//               validationErrors[field] = message;\n//             });\n//             setErrors(validationErrors);\n//           } else {\n//             setErrors({\n//               submit: error.response?.data?.message || 'Invalid registration data'\n//             });\n//           }\n//         } else {\n//           const errorMessage = error.response?.data?.message || 'Registration failed. Please try again later.';\n//           toast.error(errorMessage);\n//           setErrors({\n//             submit: errorMessage\n//           });\n//         }\n//       } finally {\n//         setIsLoading(false);\n//       }\n//     }\n//   };\n\n//   return (\n//     <div className=\"register-container\">\n//       <ToastContainer\n//         position=\"top-center\"\n//         autoClose={5000}\n//         hideProgressBar={false}\n//         newestOnTop={false}\n//         closeOnClick={false}\n//         rtl={false}\n//         pauseOnFocusLoss\n//         draggable\n//         pauseOnHover\n//       />\n\n//       <div className=\"register-card\">\n//         <h2>Create Account</h2>\n//         <form onSubmit={handleSubmit} className=\"register-form\">\n//           <div className=\"form-group\">\n//             <label htmlFor=\"username\">Username</label>\n//             <input\n//               type=\"text\"\n//               id=\"username\"\n//               name=\"username\"\n//               value={formData.username}\n//               onChange={handleChange}\n//               className={errors.username ? 'error' : ''}\n//             />\n//             {errors.username && <span className=\"error-message\">{errors.username}</span>}\n//           </div>\n\n//           <div className=\"form-group\">\n//             <label htmlFor=\"email\">Email</label>\n//             <input\n//               type=\"email\"\n//               id=\"email\"\n//               name=\"email\"\n//               value={formData.email}\n//               onChange={handleChange}\n//               className={errors.email ? 'error' : ''}\n//             />\n//             {errors.email && <span className=\"error-message\">{errors.email}</span>}\n//           </div>\n\n//           <div className=\"form-group\">\n//             <label htmlFor=\"password\">Password</label>\n//             <input\n//               type=\"password\"\n//               id=\"password\"\n//               name=\"password\"\n//               value={formData.password}\n//               onChange={handleChange}\n//               className={errors.password ? 'error' : ''}\n//             />\n//             {errors.password && <span className=\"error-message\">{errors.password}</span>}\n//           </div>\n\n//           <div className=\"form-group\">\n//             <label htmlFor=\"confirmPassword\">Confirm Password</label>\n//             <input\n//               type=\"password\"\n//               id=\"confirmPassword\"\n//               name=\"confirmPassword\"\n//               value={formData.confirmPassword}\n//               onChange={handleChange}\n//               className={errors.confirmPassword ? 'error' : ''}\n//             />\n//             {errors.confirmPassword && (\n//               <span className=\"error-message\">{errors.confirmPassword}</span>\n//             )}\n//           </div>\n\n//           {errors.submit && (\n//             <div className=\"error-message submit-error\">{errors.submit}</div>\n//           )}\n\n//           <button \n//             type=\"submit\" \n//             className=\"register-button\" \n//             disabled={isLoading}\n//           >\n//             {isLoading ? 'Creating Account...' : 'Register'}\n//           </button>\n//         </form>\n\n//         <p className=\"login-link\">\n//           Already have an account? <a href=\"/login\">Login here</a>\n//         </p>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Register;\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { authService } from '../../services/authService';\nimport './Register.css';\nconst Register = () => {\n  // ... existing state declarations\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (validateForm()) {\n      setIsLoading(true);\n      try {\n        const response = await authService.register({\n          username: formData.username,\n          email: formData.email,\n          password: formData.password\n        });\n        toast.success('Registration successful! Please login.');\n        navigate('/login');\n      } catch (error) {\n        console.error('Registration error:', error);\n        if (error.status === 409) {\n          toast.error('Username or email already exists');\n          setErrors({\n            submit: 'Username or email already exists'\n          });\n        } else if (error.status === 400) {\n          var _error$details;\n          toast.error('Please check your input and try again');\n          const validationErrors = {};\n          if ((_error$details = error.details) !== null && _error$details !== void 0 && _error$details.errors) {\n            Object.entries(error.details.errors).forEach(([field, message]) => {\n              validationErrors[field] = message;\n            });\n            setErrors(validationErrors);\n          } else {\n            setErrors({\n              submit: error.message || 'Invalid registration data'\n            });\n          }\n        } else {\n          toast.error('Registration failed. Please try again later.');\n          setErrors({\n            submit: error.message || 'Registration failed. Please try again later.'\n          });\n        }\n      } finally {\n        setIsLoading(false);\n      }\n    }\n  };\n\n  // ... rest of the component remains the same\n};\n_c = Register;\nexport default Register;\nvar _c;\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"names":["React","useState","useNavigate","toast","authService","Register","handleSubmit","e","preventDefault","validateForm","setIsLoading","response","register","username","formData","email","password","success","navigate","error","console","status","setErrors","submit","_error$details","validationErrors","details","errors","Object","entries","forEach","field","message","_c","$RefreshReg$"],"sources":["/Users/kritika.sinha/Documents/machine-coding-practice/src/components/Auth/Register.jsx"],"sourcesContent":["// import React, { useState } from 'react';\n// import { useNavigate } from 'react-router-dom';\n// import { toast, ToastContainer } from 'react-toastify';\n// import { authService } from '../../services/authService';\n// import '../styles/Register.css';\n// import 'react-toastify/dist/ReactToastify.css';\n\n// const Register = () => {\n//   const navigate = useNavigate();\n//   const [formData, setFormData] = useState({\n//     username: '',\n//     email: '',\n//     password: '',\n//     confirmPassword: '',\n//   });\n//   const [errors, setErrors] = useState({});\n//   const [isLoading, setIsLoading] = useState(false);\n\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData(prevState => ({\n//       ...prevState,\n//       [name]: value\n//     }));\n//   };\n//   const validateForm = () => {\n//     const newErrors = {};\n    \n//     if (!formData.username.trim()) {\n//       newErrors.username = 'Username is required';\n//     }\n\n//     if (!formData.email) {\n//       newErrors.email = 'Email is required';\n//     } else if (!/\\S+@\\S+\\.\\S+/.test(formData.email)) {\n//       newErrors.email = 'Email is invalid';\n//     }\n\n//     if (!formData.password) {\n//       newErrors.password = 'Password is required';\n//     } else if (formData.password.length < 6) {\n//       newErrors.password = 'Password must be at least 6 characters';\n//     }\n\n//     if (formData.password !== formData.confirmPassword) {\n//       newErrors.confirmPassword = 'Passwords do not match';\n//     }\n\n//     setErrors(newErrors);\n//     return Object.keys(newErrors).length === 0;\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n    \n//     if (validateForm()) {\n//       setIsLoading(true);\n//       try {\n//         console.log('Submitting registration form with data:', {\n//           ...formData,\n//           password: '[REDACTED]'\n//         });\n\n//         const response = await authService.register({\n//           username: formData.username,\n//           email: formData.email,\n//           password: formData.password\n//         });\n        \n//         console.log('Registration successful:', response);\n        \n//         setFormData({\n//           username: '',\n//           email: '',\n//           password: '',\n//           confirmPassword: ''\n//         });\n\n//         toast.success('Registration successful! You can now login with your credentials.', {\n//           position: \"top-center\",\n//           autoClose: 5000,\n//           hideProgressBar: false,\n//           closeOnClick: false,\n//           pauseOnHover: true,\n//           draggable: true,\n//           progress: undefined,\n//         });\n//         setIsLoading(false);\n\n//       } catch (error) {\n//         console.error('Registration error:', {\n//           message: error.message,\n//           status: error.response?.status,\n//           statusText: error.response?.statusText,\n//           data: error.response?.data\n//         });\n        \n//         // Network or connection error\n//         if (!error.response) {\n//           toast.error('Unable to connect to the server. Please check your internet connection.');\n//           setErrors({\n//             submit: 'Connection error. Please try again.'\n//           });\n//           return;\n//         }\n\n//         // Server returned an error response\n//         if (error.response?.status === 409) {\n//           toast.error('Username or email already exists');\n//           setErrors({\n//             submit: 'Username or email already exists'\n//           });\n//         } else if (error.response?.status === 400) {\n//           toast.error('Please check your input and try again');\n//           const validationErrors = {};\n//           if (error.response?.data?.errors) {\n//             Object.entries(error.response.data.errors).forEach(([field, message]) => {\n//               validationErrors[field] = message;\n//             });\n//             setErrors(validationErrors);\n//           } else {\n//             setErrors({\n//               submit: error.response?.data?.message || 'Invalid registration data'\n//             });\n//           }\n//         } else {\n//           const errorMessage = error.response?.data?.message || 'Registration failed. Please try again later.';\n//           toast.error(errorMessage);\n//           setErrors({\n//             submit: errorMessage\n//           });\n//         }\n//       } finally {\n//         setIsLoading(false);\n//       }\n//     }\n//   };\n\n//   return (\n//     <div className=\"register-container\">\n//       <ToastContainer\n//         position=\"top-center\"\n//         autoClose={5000}\n//         hideProgressBar={false}\n//         newestOnTop={false}\n//         closeOnClick={false}\n//         rtl={false}\n//         pauseOnFocusLoss\n//         draggable\n//         pauseOnHover\n//       />\n      \n//       <div className=\"register-card\">\n//         <h2>Create Account</h2>\n//         <form onSubmit={handleSubmit} className=\"register-form\">\n//           <div className=\"form-group\">\n//             <label htmlFor=\"username\">Username</label>\n//             <input\n//               type=\"text\"\n//               id=\"username\"\n//               name=\"username\"\n//               value={formData.username}\n//               onChange={handleChange}\n//               className={errors.username ? 'error' : ''}\n//             />\n//             {errors.username && <span className=\"error-message\">{errors.username}</span>}\n//           </div>\n\n//           <div className=\"form-group\">\n//             <label htmlFor=\"email\">Email</label>\n//             <input\n//               type=\"email\"\n//               id=\"email\"\n//               name=\"email\"\n//               value={formData.email}\n//               onChange={handleChange}\n//               className={errors.email ? 'error' : ''}\n//             />\n//             {errors.email && <span className=\"error-message\">{errors.email}</span>}\n//           </div>\n\n//           <div className=\"form-group\">\n//             <label htmlFor=\"password\">Password</label>\n//             <input\n//               type=\"password\"\n//               id=\"password\"\n//               name=\"password\"\n//               value={formData.password}\n//               onChange={handleChange}\n//               className={errors.password ? 'error' : ''}\n//             />\n//             {errors.password && <span className=\"error-message\">{errors.password}</span>}\n//           </div>\n\n//           <div className=\"form-group\">\n//             <label htmlFor=\"confirmPassword\">Confirm Password</label>\n//             <input\n//               type=\"password\"\n//               id=\"confirmPassword\"\n//               name=\"confirmPassword\"\n//               value={formData.confirmPassword}\n//               onChange={handleChange}\n//               className={errors.confirmPassword ? 'error' : ''}\n//             />\n//             {errors.confirmPassword && (\n//               <span className=\"error-message\">{errors.confirmPassword}</span>\n//             )}\n//           </div>\n\n//           {errors.submit && (\n//             <div className=\"error-message submit-error\">{errors.submit}</div>\n//           )}\n\n//           <button \n//             type=\"submit\" \n//             className=\"register-button\" \n//             disabled={isLoading}\n//           >\n//             {isLoading ? 'Creating Account...' : 'Register'}\n//           </button>\n//         </form>\n\n//         <p className=\"login-link\">\n//           Already have an account? <a href=\"/login\">Login here</a>\n//         </p>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Register;\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { authService } from '../../services/authService';\nimport './Register.css';\n\nconst Register = () => {\n  // ... existing state declarations\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    \n    if (validateForm()) {\n      setIsLoading(true);\n      try {\n        const response = await authService.register({\n          username: formData.username,\n          email: formData.email,\n          password: formData.password\n        });\n        \n        toast.success('Registration successful! Please login.');\n        navigate('/login');\n      } catch (error) {\n        console.error('Registration error:', error);\n        \n        if (error.status === 409) {\n          toast.error('Username or email already exists');\n          setErrors({\n            submit: 'Username or email already exists'\n          });\n        } else if (error.status === 400) {\n          toast.error('Please check your input and try again');\n          const validationErrors = {};\n          if (error.details?.errors) {\n            Object.entries(error.details.errors).forEach(([field, message]) => {\n              validationErrors[field] = message;\n            });\n            setErrors(validationErrors);\n          } else {\n            setErrors({\n              submit: error.message || 'Invalid registration data'\n            });\n          }\n        } else {\n          toast.error('Registration failed. Please try again later.');\n          setErrors({\n            submit: error.message || 'Registration failed. Please try again later.'\n          });\n        }\n      } finally {\n        setIsLoading(false);\n      }\n    }\n  };\n\n  // ... rest of the component remains the same\n};\n\nexport default Register; "],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,KAAK,QAAQ,gBAAgB;AACtC,SAASC,WAAW,QAAQ,4BAA4B;AACxD,OAAO,gBAAgB;AAEvB,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EACrB;;EAEA,MAAMC,YAAY,GAAG,MAAOC,CAAC,IAAK;IAChCA,CAAC,CAACC,cAAc,CAAC,CAAC;IAElB,IAAIC,YAAY,CAAC,CAAC,EAAE;MAClBC,YAAY,CAAC,IAAI,CAAC;MAClB,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMP,WAAW,CAACQ,QAAQ,CAAC;UAC1CC,QAAQ,EAAEC,QAAQ,CAACD,QAAQ;UAC3BE,KAAK,EAAED,QAAQ,CAACC,KAAK;UACrBC,QAAQ,EAAEF,QAAQ,CAACE;QACrB,CAAC,CAAC;QAEFb,KAAK,CAACc,OAAO,CAAC,wCAAwC,CAAC;QACvDC,QAAQ,CAAC,QAAQ,CAAC;MACpB,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;QAE3C,IAAIA,KAAK,CAACE,MAAM,KAAK,GAAG,EAAE;UACxBlB,KAAK,CAACgB,KAAK,CAAC,kCAAkC,CAAC;UAC/CG,SAAS,CAAC;YACRC,MAAM,EAAE;UACV,CAAC,CAAC;QACJ,CAAC,MAAM,IAAIJ,KAAK,CAACE,MAAM,KAAK,GAAG,EAAE;UAAA,IAAAG,cAAA;UAC/BrB,KAAK,CAACgB,KAAK,CAAC,uCAAuC,CAAC;UACpD,MAAMM,gBAAgB,GAAG,CAAC,CAAC;UAC3B,KAAAD,cAAA,GAAIL,KAAK,CAACO,OAAO,cAAAF,cAAA,eAAbA,cAAA,CAAeG,MAAM,EAAE;YACzBC,MAAM,CAACC,OAAO,CAACV,KAAK,CAACO,OAAO,CAACC,MAAM,CAAC,CAACG,OAAO,CAAC,CAAC,CAACC,KAAK,EAAEC,OAAO,CAAC,KAAK;cACjEP,gBAAgB,CAACM,KAAK,CAAC,GAAGC,OAAO;YACnC,CAAC,CAAC;YACFV,SAAS,CAACG,gBAAgB,CAAC;UAC7B,CAAC,MAAM;YACLH,SAAS,CAAC;cACRC,MAAM,EAAEJ,KAAK,CAACa,OAAO,IAAI;YAC3B,CAAC,CAAC;UACJ;QACF,CAAC,MAAM;UACL7B,KAAK,CAACgB,KAAK,CAAC,8CAA8C,CAAC;UAC3DG,SAAS,CAAC;YACRC,MAAM,EAAEJ,KAAK,CAACa,OAAO,IAAI;UAC3B,CAAC,CAAC;QACJ;MACF,CAAC,SAAS;QACRtB,YAAY,CAAC,KAAK,CAAC;MACrB;IACF;EACF,CAAC;;EAED;AACF,CAAC;AAACuB,EAAA,GAnDI5B,QAAQ;AAqDd,eAAeA,QAAQ;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}