{"ast":null,"code":"import api from '../api/axiosConfig';\nimport axios from 'axios';\n\n// Temporary hardcoded URL for testing\nconst API_URL = 'http://localhost:8080';\nconsole.log('Environment:', {\n  nodeEnv: process.env.NODE_ENV,\n  apiUrl: process.env.REACT_APP_API_BASE_URL,\n  finalUrl: API_URL\n});\nexport const authService = {\n  login: async credentials => {\n    try {\n      const response = await api.post('/api/auth/login', credentials);\n      return response.data;\n    } catch (error) {\n      var _error$response, _error$response$data, _error$response2, _error$response3;\n      throw {\n        message: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Login failed',\n        status: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status,\n        details: (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data\n      };\n    }\n  },\n  register: async userData => {\n    try {\n      console.log('Attempting registration with:', userData);\n      const registerUrl = `${API_URL}/api/auth/register`;\n      console.log('API URL:', registerUrl);\n      const response = await axios.post(registerUrl, userData, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      console.log('Registration response:', response.data);\n      return response.data;\n    } catch (error) {\n      var _error$response4, _error$response5;\n      console.error('Registration error details:', {\n        message: error.message,\n        response: error.response,\n        status: (_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.status,\n        data: (_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data\n      });\n      throw error;\n    }\n  }\n};\nexport default authService;","map":{"version":3,"names":["api","axios","API_URL","console","log","nodeEnv","process","env","NODE_ENV","apiUrl","REACT_APP_API_BASE_URL","finalUrl","authService","login","credentials","response","post","data","error","_error$response","_error$response$data","_error$response2","_error$response3","message","status","details","register","userData","registerUrl","headers","_error$response4","_error$response5"],"sources":["/Users/kritika.sinha/Documents/machine-coding-practice/src/services/authService.js"],"sourcesContent":["import api from '../api/axiosConfig';\nimport axios from 'axios';\n\n// Temporary hardcoded URL for testing\nconst API_URL = 'http://localhost:8080';\n\nconsole.log('Environment:', {\n  nodeEnv: process.env.NODE_ENV,\n  apiUrl: process.env.REACT_APP_API_BASE_URL,\n  finalUrl: API_URL\n});\n\nexport const authService = {\n  login: async (credentials) => {\n    try {\n      const response = await api.post('/api/auth/login', credentials);\n      return response.data;\n    } catch (error) {\n      throw {\n        message: error.response?.data?.message || 'Login failed',\n        status: error.response?.status,\n        details: error.response?.data\n      };\n    }\n  },\n\n  register: async (userData) => {\n    try {\n      console.log('Attempting registration with:', userData);\n      const registerUrl = `${API_URL}/api/auth/register`;\n      console.log('API URL:', registerUrl);\n      \n      const response = await axios.post(registerUrl, userData, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      \n      console.log('Registration response:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Registration error details:', {\n        message: error.message,\n        response: error.response,\n        status: error.response?.status,\n        data: error.response?.data\n      });\n      throw error;\n    }\n  }\n};\n\nexport default authService;"],"mappings":"AAAA,OAAOA,GAAG,MAAM,oBAAoB;AACpC,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,OAAO,GAAG,uBAAuB;AAEvCC,OAAO,CAACC,GAAG,CAAC,cAAc,EAAE;EAC1BC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,QAAQ;EAC7BC,MAAM,EAAEH,OAAO,CAACC,GAAG,CAACG,sBAAsB;EAC1CC,QAAQ,EAAET;AACZ,CAAC,CAAC;AAEF,OAAO,MAAMU,WAAW,GAAG;EACzBC,KAAK,EAAE,MAAOC,WAAW,IAAK;IAC5B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMf,GAAG,CAACgB,IAAI,CAAC,iBAAiB,EAAEF,WAAW,CAAC;MAC/D,OAAOC,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MAAA,IAAAC,eAAA,EAAAC,oBAAA,EAAAC,gBAAA,EAAAC,gBAAA;MACd,MAAM;QACJC,OAAO,EAAE,EAAAJ,eAAA,GAAAD,KAAK,CAACH,QAAQ,cAAAI,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBF,IAAI,cAAAG,oBAAA,uBAApBA,oBAAA,CAAsBG,OAAO,KAAI,cAAc;QACxDC,MAAM,GAAAH,gBAAA,GAAEH,KAAK,CAACH,QAAQ,cAAAM,gBAAA,uBAAdA,gBAAA,CAAgBG,MAAM;QAC9BC,OAAO,GAAAH,gBAAA,GAAEJ,KAAK,CAACH,QAAQ,cAAAO,gBAAA,uBAAdA,gBAAA,CAAgBL;MAC3B,CAAC;IACH;EACF,CAAC;EAEDS,QAAQ,EAAE,MAAOC,QAAQ,IAAK;IAC5B,IAAI;MACFxB,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEuB,QAAQ,CAAC;MACtD,MAAMC,WAAW,GAAG,GAAG1B,OAAO,oBAAoB;MAClDC,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEwB,WAAW,CAAC;MAEpC,MAAMb,QAAQ,GAAG,MAAMd,KAAK,CAACe,IAAI,CAACY,WAAW,EAAED,QAAQ,EAAE;QACvDE,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MAEF1B,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEW,QAAQ,CAACE,IAAI,CAAC;MACpD,OAAOF,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MAAA,IAAAY,gBAAA,EAAAC,gBAAA;MACd5B,OAAO,CAACe,KAAK,CAAC,6BAA6B,EAAE;QAC3CK,OAAO,EAAEL,KAAK,CAACK,OAAO;QACtBR,QAAQ,EAAEG,KAAK,CAACH,QAAQ;QACxBS,MAAM,GAAAM,gBAAA,GAAEZ,KAAK,CAACH,QAAQ,cAAAe,gBAAA,uBAAdA,gBAAA,CAAgBN,MAAM;QAC9BP,IAAI,GAAAc,gBAAA,GAAEb,KAAK,CAACH,QAAQ,cAAAgB,gBAAA,uBAAdA,gBAAA,CAAgBd;MACxB,CAAC,CAAC;MACF,MAAMC,KAAK;IACb;EACF;AACF,CAAC;AAED,eAAeN,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}