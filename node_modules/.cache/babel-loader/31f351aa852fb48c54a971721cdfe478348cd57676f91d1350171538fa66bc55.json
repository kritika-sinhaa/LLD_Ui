{"ast":null,"code":"// import { useState, useEffect } from 'react';\n// import { useParams } from 'react-router-dom';\n// import {\n//   Container,\n//   Paper,\n//   Typography,\n//   Box,\n//   Button,\n//   CircularProgress,\n//   ToggleButton,\n//   ToggleButtonGroup\n// } from '@mui/material';\n// import { topicService } from '../../services/topicService';\n// import { submissionService } from '../../services/submissionService';\n// import CodeEditor from '../CodeEditor/CodeEditor';\n\n// const JAVA_TEMPLATE = `\n// public class Solution {\n//     /**\n//      * Main method to test your solution\n//      */\n//     public static void main(String[] args) {\n//         Solution solution = new Solution();\n//         // Add test cases here\n//     }\n\n//     /**\n//      * Add your solution method here\n//      */\n//     public void solve() {\n//         // Write your solution here\n//     }\n\n//     /**\n//      * Add helper methods here if needed\n//      */\n// }\n// `;\n\n// const CPP_TEMPLATE = `#include <iostream>\n// #include <vector>\n// #include <string>\n// using namespace std;\n\n// class Solution {\n// public:\n//     // Add your solution method here\n//     void solve() {\n//         // Write your solution here\n//     }\n\n//     // Add helper methods here if needed\n// };\n\n// int main() {\n//     Solution solution;\n//     // Add test cases here\n//     return 0;\n// }\n// `;\n\n// const PYTHON_TEMPLATE = `class Solution:\n//     def solve(self):\n//         \"\"\"\n//         Add your solution method here\n//         \"\"\"\n//         # Write your solution here\n//         pass\n\n//     # Add helper methods here if needed\n\n// def main():\n//     solution = Solution()\n//     # Add test cases here\n\n// if __name__ == \"__main__\":\n//     main()\n// `;\n\n// const TopicDetail = () => {\n//   const { id } = useParams();\n//   const [topic, setTopic] = useState(null);\n//   const [language, setLanguage] = useState('java'); // Set Java as default\n//   const [solution, setSolution] = useState(JAVA_TEMPLATE); // Set Java template as default\n//   const [requirements, setRequirements] = useState('// Define your requirements here\\n\\n');\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n\n//   const handleLanguageChange = (event, newLanguage) => {\n//     if (newLanguage !== null) {\n//       setLanguage(newLanguage);\n//       // Update solution template based on language\n//       switch(newLanguage) {\n//         case 'java':\n//           setSolution(JAVA_TEMPLATE);\n//           break;\n//         case 'cpp':\n//           setSolution(CPP_TEMPLATE);\n//           break;\n//         case 'python':\n//           setSolution(PYTHON_TEMPLATE);\n//           break;\n//         default:\n//           setSolution(JAVA_TEMPLATE);\n//       }\n//     }\n//   };\n\n//   useEffect(() => {\n//     const fetchTopic = async () => {\n//       try {\n//         setLoading(true);\n//         const data = await topicService.getTopicById(id);\n//         console.log('Fetched topic data:', data);\n//         setTopic(data);\n//       } catch (error) {\n//         console.error('Error fetching topic:', error);\n//         setError('Failed to load topic details');\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchTopic();\n//   }, [id]);\n\n//   const handleSubmit = async () => {\n//     try {\n//       const submissionData = {\n//         code: solution,\n//         language: language,\n//         problemId: id\n//       };\n\n//       const result = await submissionService.evaluateSolution(id, submissionData);\n//       // Handle the result as needed\n\n//     } catch (error) {\n//       console.error('Error submitting solution:', error);\n//       // Handle error appropriately\n//     }\n//   };\n\n//   if (loading) {\n//     return (\n//       <Container sx={{ py: 4, textAlign: 'center' }}>\n//         <CircularProgress />\n//       </Container>\n//     );\n//   }\n\n//   if (error) {\n//     return (\n//       <Container sx={{ py: 4 }}>\n//         <Typography color=\"error\">{error}</Typography>\n//       </Container>\n//     );\n//   }\n\n//   return (\n//     <Container sx={{ py: 4 }}>\n//       {topic && (\n//         <>\n//           <Typography variant=\"h4\" gutterBottom>\n//             {topic.name}\n//           </Typography>\n//           <Paper sx={{ p: 3, mb: 3 }}>\n//             <Typography variant=\"h6\" gutterBottom>Problem Statement</Typography>\n//             <Typography sx={{ whiteSpace: 'pre-line' }}>{topic.description}</Typography>\n//           </Paper>\n\n//           <Paper sx={{ p: 3, mb: 3 }}>\n//             <Typography variant=\"h6\" gutterBottom>\n//               Functional Requirements\n//             </Typography>\n//             <CodeEditor\n//               value={requirements}\n//               onChange={setRequirements}\n//               height=\"200px\"\n//               language=\"javascript\"\n//             />\n//           </Paper>\n\n//           <Paper sx={{ p: 3, mb: 3 }}>\n//             <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n//               <Typography variant=\"h6\">\n//                 Solution\n//               </Typography>\n//               <ToggleButtonGroup\n//                 value={language}\n//                 exclusive\n//                 onChange={handleLanguageChange}\n//                 size=\"small\"\n//               >\n//                 <ToggleButton \n//                   value=\"java\"\n//                   sx={{ \n//                     '&.Mui-selected': { \n//                       bgcolor: '#ffa116 !important',\n//                       color: 'white !important'\n//                     }\n//                   }}\n//                 >\n//                   Java\n//                 </ToggleButton>\n//                 <ToggleButton \n//                   value=\"cpp\"\n//                   sx={{ \n//                     '&.Mui-selected': { \n//                       bgcolor: '#ffa116 !important',\n//                       color: 'white !important'\n//                     }\n//                   }}\n//                 >\n//                   C++\n//                 </ToggleButton>\n//                 <ToggleButton \n//                   value=\"python\"\n//                   sx={{ \n//                     '&.Mui-selected': { \n//                       bgcolor: '#ffa116 !important',\n//                       color: 'white !important'\n//                     }\n//                   }}\n//                 >\n//                   Python\n//                 </ToggleButton>\n//               </ToggleButtonGroup>\n//             </Box>\n//             <CodeEditor\n//               value={solution}\n//               onChange={setSolution}\n//               height=\"400px\"\n//               language={language}\n//             />\n//           </Paper>\n\n//           <Box sx={{ mt: 2 }}>\n//             <Button\n//               variant=\"contained\"\n//               color=\"primary\"\n//               onClick={handleSubmit}\n//               sx={{\n//                 bgcolor: '#ffa116',\n//                 '&:hover': {\n//                   bgcolor: '#ff9100'\n//                 }\n//               }}\n//             >\n//               Submit Solution\n//             </Button>\n//           </Box>\n//         </>\n//       )}\n//     </Container>\n//   );\n// };\n\n// export default TopicDetail;","map":{"version":3,"names":[],"sources":["/Users/kritika.sinha/Documents/machine-coding-practice/src/components/Topics/TopicDetail.jsx"],"sourcesContent":["// import { useState, useEffect } from 'react';\n// import { useParams } from 'react-router-dom';\n// import {\n//   Container,\n//   Paper,\n//   Typography,\n//   Box,\n//   Button,\n//   CircularProgress,\n//   ToggleButton,\n//   ToggleButtonGroup\n// } from '@mui/material';\n// import { topicService } from '../../services/topicService';\n// import { submissionService } from '../../services/submissionService';\n// import CodeEditor from '../CodeEditor/CodeEditor';\n\n// const JAVA_TEMPLATE = `\n// public class Solution {\n//     /**\n//      * Main method to test your solution\n//      */\n//     public static void main(String[] args) {\n//         Solution solution = new Solution();\n//         // Add test cases here\n//     }\n\n//     /**\n//      * Add your solution method here\n//      */\n//     public void solve() {\n//         // Write your solution here\n//     }\n\n//     /**\n//      * Add helper methods here if needed\n//      */\n// }\n// `;\n\n// const CPP_TEMPLATE = `#include <iostream>\n// #include <vector>\n// #include <string>\n// using namespace std;\n\n// class Solution {\n// public:\n//     // Add your solution method here\n//     void solve() {\n//         // Write your solution here\n//     }\n    \n//     // Add helper methods here if needed\n// };\n\n// int main() {\n//     Solution solution;\n//     // Add test cases here\n//     return 0;\n// }\n// `;\n\n// const PYTHON_TEMPLATE = `class Solution:\n//     def solve(self):\n//         \"\"\"\n//         Add your solution method here\n//         \"\"\"\n//         # Write your solution here\n//         pass\n\n//     # Add helper methods here if needed\n\n// def main():\n//     solution = Solution()\n//     # Add test cases here\n\n// if __name__ == \"__main__\":\n//     main()\n// `;\n\n// const TopicDetail = () => {\n//   const { id } = useParams();\n//   const [topic, setTopic] = useState(null);\n//   const [language, setLanguage] = useState('java'); // Set Java as default\n//   const [solution, setSolution] = useState(JAVA_TEMPLATE); // Set Java template as default\n//   const [requirements, setRequirements] = useState('// Define your requirements here\\n\\n');\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n\n//   const handleLanguageChange = (event, newLanguage) => {\n//     if (newLanguage !== null) {\n//       setLanguage(newLanguage);\n//       // Update solution template based on language\n//       switch(newLanguage) {\n//         case 'java':\n//           setSolution(JAVA_TEMPLATE);\n//           break;\n//         case 'cpp':\n//           setSolution(CPP_TEMPLATE);\n//           break;\n//         case 'python':\n//           setSolution(PYTHON_TEMPLATE);\n//           break;\n//         default:\n//           setSolution(JAVA_TEMPLATE);\n//       }\n//     }\n//   };\n\n//   useEffect(() => {\n//     const fetchTopic = async () => {\n//       try {\n//         setLoading(true);\n//         const data = await topicService.getTopicById(id);\n//         console.log('Fetched topic data:', data);\n//         setTopic(data);\n//       } catch (error) {\n//         console.error('Error fetching topic:', error);\n//         setError('Failed to load topic details');\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchTopic();\n//   }, [id]);\n\n//   const handleSubmit = async () => {\n//     try {\n//       const submissionData = {\n//         code: solution,\n//         language: language,\n//         problemId: id\n//       };\n\n//       const result = await submissionService.evaluateSolution(id, submissionData);\n//       // Handle the result as needed\n      \n//     } catch (error) {\n//       console.error('Error submitting solution:', error);\n//       // Handle error appropriately\n//     }\n//   };\n\n//   if (loading) {\n//     return (\n//       <Container sx={{ py: 4, textAlign: 'center' }}>\n//         <CircularProgress />\n//       </Container>\n//     );\n//   }\n\n//   if (error) {\n//     return (\n//       <Container sx={{ py: 4 }}>\n//         <Typography color=\"error\">{error}</Typography>\n//       </Container>\n//     );\n//   }\n\n//   return (\n//     <Container sx={{ py: 4 }}>\n//       {topic && (\n//         <>\n//           <Typography variant=\"h4\" gutterBottom>\n//             {topic.name}\n//           </Typography>\n//           <Paper sx={{ p: 3, mb: 3 }}>\n//             <Typography variant=\"h6\" gutterBottom>Problem Statement</Typography>\n//             <Typography sx={{ whiteSpace: 'pre-line' }}>{topic.description}</Typography>\n//           </Paper>\n\n//           <Paper sx={{ p: 3, mb: 3 }}>\n//             <Typography variant=\"h6\" gutterBottom>\n//               Functional Requirements\n//             </Typography>\n//             <CodeEditor\n//               value={requirements}\n//               onChange={setRequirements}\n//               height=\"200px\"\n//               language=\"javascript\"\n//             />\n//           </Paper>\n\n//           <Paper sx={{ p: 3, mb: 3 }}>\n//             <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n//               <Typography variant=\"h6\">\n//                 Solution\n//               </Typography>\n//               <ToggleButtonGroup\n//                 value={language}\n//                 exclusive\n//                 onChange={handleLanguageChange}\n//                 size=\"small\"\n//               >\n//                 <ToggleButton \n//                   value=\"java\"\n//                   sx={{ \n//                     '&.Mui-selected': { \n//                       bgcolor: '#ffa116 !important',\n//                       color: 'white !important'\n//                     }\n//                   }}\n//                 >\n//                   Java\n//                 </ToggleButton>\n//                 <ToggleButton \n//                   value=\"cpp\"\n//                   sx={{ \n//                     '&.Mui-selected': { \n//                       bgcolor: '#ffa116 !important',\n//                       color: 'white !important'\n//                     }\n//                   }}\n//                 >\n//                   C++\n//                 </ToggleButton>\n//                 <ToggleButton \n//                   value=\"python\"\n//                   sx={{ \n//                     '&.Mui-selected': { \n//                       bgcolor: '#ffa116 !important',\n//                       color: 'white !important'\n//                     }\n//                   }}\n//                 >\n//                   Python\n//                 </ToggleButton>\n//               </ToggleButtonGroup>\n//             </Box>\n//             <CodeEditor\n//               value={solution}\n//               onChange={setSolution}\n//               height=\"400px\"\n//               language={language}\n//             />\n//           </Paper>\n\n//           <Box sx={{ mt: 2 }}>\n//             <Button\n//               variant=\"contained\"\n//               color=\"primary\"\n//               onClick={handleSubmit}\n//               sx={{\n//                 bgcolor: '#ffa116',\n//                 '&:hover': {\n//                   bgcolor: '#ff9100'\n//                 }\n//               }}\n//             >\n//               Submit Solution\n//             </Button>\n//           </Box>\n//         </>\n//       )}\n//     </Container>\n//   );\n// };\n\n// export default TopicDetail;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}